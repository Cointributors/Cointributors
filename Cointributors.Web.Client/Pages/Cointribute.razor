@rendermode @(new InteractiveWebAssemblyRenderMode(prerender:false))

@using System.Diagnostics
@using System.Numerics
@using Cointributors.Web.Client.Contract.CointributionSplitter
@using Cointributors.Web.Client.Contract.Token
@using Nethereum.Contracts.Standards.ERC20
@implements IDisposable
@inject IJSRuntime jsRuntime
@inject SelectedEthereumHostProviderService selectedHostProviderService
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider siweAuthenticationStateProvider

<AuthorizeView Roles="EthereumConnected">
    <Authorized>
        <div class="d-grid gap-2 mt-3 mb-4 d-md-flex justify-content-md-end">
            <input @bind="donationAmount" type="number" placeholder="Enter donation amount" class="form-control me-2" />
            
            <select @bind="selectedTokenAddress" class="form-select me-2" >
                @if (tokenList != null)
                {
                    @foreach (var token in tokenList)
                    {
                        <option value="@token.Address">@token.Symbol</option>
                    }
                }
            </select>
            
            @if (donating == false && donated == false)
            {
                <a @onclick="@Contribute" class="btn btn-dark">Donate</a>
            }
            else if (donating == true && donated == false)
            {
                <button class="btn btn-dark" disabled>Donating</button>
            }
            else if (donating == true && donated == true)
            {
                <button class="btn btn-outline-success" disabled>Donated</button>
            }
        </div>

        @if (!string.IsNullOrEmpty(transactionHash))
        {
            <p>
                Awesome, you cointributed! Don't believe us? 
                You can check the transaction <a href="https://sepolia.etherscan.io/tx/@transactionHash" target="_blank">here</a>
            </p>
        }
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger mt-2">@errorMessage</div>
        }
    </Authorized>
    <NotAuthorized>
        <div class="mt-2 mb-4">
            Please <span class="fw-bold">connect MetaMask</span> to donate
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private bool ethereumAvailable;
    private string selectedAccount;
    private long selectedChainId;

    IEthereumHostProvider ethereumHostProvider;

    private decimal donationAmount;
    private string selectedTokenAddress = "0x1c7D4B196Cb0C7B01d743Fbc6116a902379C7238";
    private string transactionHash;
    private string errorMessage;

    private bool donating;
    private bool donated;

    private class TokenInfo
    {
        public string Symbol { get; set; }
        public string Address { get; set; }
    }

    private List<TokenInfo> tokenList =
    [
        new TokenInfo { Symbol = "USDC", Address = "0x1c7D4B196Cb0C7B01d743Fbc6116a902379C7238" },
    new TokenInfo { Symbol = "EURC", Address = "0x08210F9170F89Ab7658F0B5E3fF39b0E03C594D4" }
    ];

    [Parameter]
    public string ContractAddress { get; set; }

    protected override void OnInitialized()
    {
        //metamask is selected
        ethereumHostProvider = selectedHostProviderService.SelectedHost;
        ethereumHostProvider.SelectedAccountChanged += OnSelectedAccountChanged;
        ethereumHostProvider.NetworkChanged += OnNetworkChanged;
        ethereumHostProvider.EnabledChanged += OnEnabledChanged;

    }

    public void Dispose()
    {
        ethereumHostProvider.SelectedAccountChanged -= OnSelectedAccountChanged;
        ethereumHostProvider.NetworkChanged -= OnNetworkChanged;
        ethereumHostProvider.EnabledChanged -= OnEnabledChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        ethereumAvailable = await ethereumHostProvider.CheckProviderAvailabilityAsync();
        if (ethereumAvailable)
        {
            selectedAccount = await ethereumHostProvider.GetProviderSelectedAccountAsync();
        }
    }

    private async Task OnSelectedAccountChanged(string account)
    {
        selectedAccount = account;
        StateHasChanged();
    }

    private async Task OnNetworkChanged(long chainId)
    {
        selectedChainId = chainId;
        StateHasChanged();
    }

    private async Task OnEnabledChanged(bool enabled)
    {
        if (enabled)
        {
            await GetChainId();
            StateHasChanged();
        }
    }

    private async Task GetChainId()
    {
        var web3 = await ethereumHostProvider.GetWeb3Async();
        var chainId = await web3.Eth.ChainId.SendRequestAsync();
        selectedChainId = (long)chainId.Value;
    }

    protected async Task Contribute()
    {
        if (donationAmount <= 0)
        {
            errorMessage = "Donation amount must be greater than 0.";
            return;
        }

        if (string.IsNullOrWhiteSpace(selectedTokenAddress))
        {
            errorMessage = "Token is required.";
            return;
        }

        donating = true;

        errorMessage = null;

        var web3 = await ethereumHostProvider.GetWeb3Async();

        var tokenService = new TokenService(web3, selectedTokenAddress);

        var selectedAccountHasAllowance = await tokenService.AllowanceQueryAsync(selectedAccount, ContractAddress) > 0;

        if (!selectedAccountHasAllowance)
        {
            var transactionReceipt = await tokenService.IncreaseAllowanceRequestAndWaitForReceiptAsync(ContractAddress, 30_000_000);
        }

        var cointributionSplitterService = new CointributionSplitterService(web3, ContractAddress);

        try
        {
            //var donationAmountWei = (BigInteger)(donationAmount * 1_000_000_000_000_000_000m);
            var donationAmountWei = (BigInteger)(donationAmount * 1_000_000m);

            var transactionReceipt = await cointributionSplitterService.DonateRequestAndWaitForReceiptAsync(donationAmountWei, selectedTokenAddress);

            if (transactionReceipt.Status.Value == 1) // 1 means success
            {
                transactionHash = transactionReceipt.TransactionHash;

                donated = true;
            }
            else
            {
                errorMessage = $"Transaction failed: {transactionReceipt.Status.Value}";
            }
        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
    }
}
