@page "/repositories/{Id:long}"

@attribute [Authorize]

@using System.Text
@using System.Text.Json
@using Cointributors.Data
@using Cointributors.Web.Client.Data
@using Cointributors.Web.Components.Account
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Octokit

@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject DataContext DataContext

<PageTitle>Allocations</PageTitle>

<div class="container-sm coin-small">
    <h1>Choose your Allocation</h1>

    <p>Who worked hard for their cointribution? Don't forget the projects you depend on</p>

    @if (AllocationsForm == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        @if (requiredGistAllocations != null && requiredGistAllocations.Any())
        {
            <p class="text-secondary">The following contributors/dependencies which do not have a Gist Address; @string.Join(", ", requiredGistAllocations.Select(a => a.Destination)).</p>
            <p class="text-secondary">Send them <a href="add-address-gist" target="_blank">here</a> so they can receive an allocation of the Cointribution</p>
        }

        <EditForm Model="AllocationsForm" FormName="create-allocations" OnSubmit="@CreateAllocations" method="post">
            <input name="AllocationsForm.AvatarUrl" value="@AllocationsForm.AvatarUrl" type="hidden" />
            <table class="table">
                <thead>
                <tr>
                    <th></th>
                    <th>Destination</th>
                    <th>Type</th>
                    <th class="w-25">Allocation</th>
                </tr>
                </thead>
                <tbody>
                @for (var i = 0; i < AllocationsForm.Allocations.Count; i++)
                {
                    <tr>
                        <td>
                            <img src="@AllocationsForm.Allocations[i].AvatarUrl" class="img-fluid" style="width: 2rem;" alt="@AllocationsForm.Allocations[i].Destination">
                        </td>
                        <td>@AllocationsForm.Allocations[i].Destination</td>
                        <td>@AllocationsForm.Allocations[i].Type</td>
                        <td>
                            <input name="AllocationsForm.Allocations[@(i)].AvatarUrl" value="@AllocationsForm.Allocations[i].AvatarUrl" type="hidden"/>
                            <input name="AllocationsForm.Allocations[@(i)].Destination" value="@AllocationsForm.Allocations[i].Destination" type="hidden"/>
                            <input name="AllocationsForm.Allocations[@(i)].Type" value="@AllocationsForm.Allocations[i].Type" type="hidden"/>
                            <input name="AllocationsForm.Allocations[@(i)].Address" value="@AllocationsForm.Allocations[i].Address" type="hidden"/>
                            @if (AllocationsForm.Allocations[i].Address != null)
                            {
                                <input class="form-control" name="AllocationsForm.Allocations[@(i)].Allocation" value="@AllocationsForm.Allocations[i].Allocation"/>
                            }
                            else
                            {
                                <div>Add cointributors address</div>
                            }
                        </td>
                    </tr>
                }
                </tbody>
            </table>
            
            @if (AllocationsForm.Allocations.Any())
            {
                <p><span class="fw-bold">Don't</span> f#$% it up, we didn't add any validation...</p>

                <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                    <button type="submit" class="btn btn-dark">That seems fair!</button>
                </div>
            }
            else
            {
                <p>There are no contributors/dependencies with a Gist Address :(</p>
            }

        </EditForm>
    }
</div>

@code {
    public class AllocationData
    {
        public string Destination { get; set; }
        public DestinationType Type { get; set; }
        public string AvatarUrl { get; set; }
        public string? Address { get; set; }
        public int Allocation { get; set; }
    }

    public class AllocationsData
    {
        public string AvatarUrl { get; set; }
        public List<AllocationData> Allocations { get; set; }
    }

    [Parameter]
    public long Id { get; set; }

    [SupplyParameterFromForm]
    public AllocationsData? AllocationsForm { get; set; }

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private string? cointributorsSha;
    private List<AllocationData> requiredGistAllocations;
    private GitHubClient gitHubClient;

    protected override async Task OnInitializedAsync()
    {
        var accessToken = await UserAccessor.GetGitHubAccessToken(HttpContext);

        gitHubClient = new GitHubClient(new ProductHeaderValue("cointributors"))
            {
                Credentials = new Credentials(accessToken)
            };

        var contents = await gitHubClient.Repository.Content.GetAllContents(Id);

        cointributorsSha = contents.SingleOrDefault(c => c.Name == "cointributors.json")?.Sha;

        if (AllocationsForm == null)
        {
            var ourWorldIdLogins = await DataContext.UserLogins.Where(l => l.LoginProvider == "WorldId").ToListAsync();

            var repository = await gitHubClient.Repository.Get(Id);

            var contributors = await gitHubClient.Repository.Statistics.GetContributors(Id);

            var allocations = new List<AllocationData>();
            requiredGistAllocations = new List<AllocationData>();

            foreach (var contributor in contributors)
            {
                var gists = await gitHubClient.Gist.GetAllForUser(contributor.Author.Login);

                var cointributorsGist = gists.FirstOrDefault(g => g.Description == "My Cointributors Address");

                if (cointributorsGist != null)
                {
                    cointributorsGist = await gitHubClient.Gist.Get(cointributorsGist.Id);

                    if (cointributorsGist.Files.TryGetValue("WorldId", out var worldIdFile) && ourWorldIdLogins.Any(l => l.ProviderKey == worldIdFile.Content))
                    {
                        allocations.Add(new AllocationData
                            {
                                Destination = contributor.Author.Login,
                                Type = DestinationType.User,
                                AvatarUrl = contributor.Author.AvatarUrl,
                                Address = cointributorsGist.Files.FirstOrDefault(f => f.Key == "Address").Value.Content,
                                Allocation = 0
                            });
                    }
                    else
                    {
                        requiredGistAllocations.Add(new AllocationData
                            {
                                Destination = contributor.Author.Login,
                                Type = DestinationType.User,
                                AvatarUrl = contributor.Author.AvatarUrl,
                                Address = null,
                                Allocation = 0
                            });
                    }
                }
                else
                {
                    requiredGistAllocations.Add(new AllocationData
                        {
                            Destination = contributor.Author.Login,
                            Type = DestinationType.User,
                            AvatarUrl = contributor.Author.AvatarUrl,
                            Address = null,
                            Allocation = 0
                        });
                }
            }

            var requirementsFile = contents.FirstOrDefault(c => c.Name == "requirements.txt");

            if (requirementsFile != null)
            {
                var requirementsBytes = await gitHubClient.Repository.Content
                    .GetRawContent(repository.Owner.Login, repository.Name, requirementsFile.Path);

                using var reader = new StringReader(Encoding.UTF8.GetString(requirementsBytes));

                while (await reader.ReadLineAsync() is { } line)
                {
                    if (!string.IsNullOrWhiteSpace(line) && line.Contains("@ git+"))
                    {
                        var lineSplit = line.Split(' ', '@', '/');

                        var dependencyName = lineSplit[0];
                        var dependencyRepositoryOwner = lineSplit[^3];
                        var dependencyRepositoryName = lineSplit[^2];

                        var dependencyRepository = await gitHubClient.Repository.Get(dependencyRepositoryOwner, dependencyRepositoryName);

                        var dependencyRepositoryContents = await gitHubClient.Repository.Content.GetAllContents(dependencyRepositoryOwner, dependencyRepositoryName);

                        var dependencyRepositoryCointributorsFile = dependencyRepositoryContents.FirstOrDefault(c => c.Name == "cointributors.json");

                        if (dependencyRepositoryCointributorsFile != null)
                        {
                            var dependencyRepositoryCointributorsBytes = await gitHubClient.Repository.Content
                                .GetRawContent(dependencyRepositoryOwner, dependencyRepositoryName, dependencyRepositoryCointributorsFile.Path);

                            var dependencyRepositoryCointributors = JsonSerializer.Deserialize<CointributorsData>(dependencyRepositoryCointributorsBytes);

                            allocations.Add(new AllocationData
                                {
                                    Destination = dependencyName,
                                    Type = DestinationType.Dependency,
                                    AvatarUrl = dependencyRepository.Owner.AvatarUrl,
                                    Address = dependencyRepositoryCointributors.Address,
                                    Allocation = 0
                                });
                        }
                        else
                        {
                            requiredGistAllocations.Add(new AllocationData
                                {
                                    Destination = dependencyName,
                                    Type = DestinationType.Dependency,
                                    AvatarUrl = dependencyRepository.Owner.AvatarUrl,
                                    Address = null,
                                    Allocation = 0
                                });
                        }

                    }
                }
            }

            AllocationsForm ??= new AllocationsData
                {
                    AvatarUrl = repository.Owner.AvatarUrl,
                    Allocations = allocations.OrderBy(a => a.Type).ThenBy(a => a.Destination).ToList()
                };
        }
    }

    private async Task CreateAllocations()
    {
        var cointributorsJson = JsonSerializer.Serialize(new CointributorsData
            {
                AvatarUrl = AllocationsForm.AvatarUrl,
                Address = null,
                Allocations = AllocationsForm.Allocations.Where(a => a.Allocation > 0).Select(a => new CointributorsAllocationData
                {
                    Destination = a.Destination,
                    Type = a.Type,
                    AvatarUrl = a.AvatarUrl,
                    Address = a.Address,
                    Allocation = a.Allocation
                }).ToList()
            });

        if (cointributorsSha != null)
        {
            await gitHubClient.Repository.Content.UpdateFile(Id, "cointributors.json",
                new UpdateFileRequest("Updating Cointributors", cointributorsJson, cointributorsSha));
        }
        else
        {
            await gitHubClient.Repository.Content.CreateFile(Id, "cointributors.json",
                new CreateFileRequest("Adding Cointributors", cointributorsJson));

        }

        RedirectManager.RedirectTo($"repositories/{Id}/deploy");
    }
}
