@page "/repositories/{Id:long}/deploy"

@attribute [Authorize]

@using System.Text.Json
@using Cointributors.Data
@using Cointributors.Web.Components.Account
@using Microsoft.AspNetCore.Authorization
@using Octokit
@using Cointributors.Web.Client.Pages
@using Cointributors.Web.Client.Data

@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject DataContext DataContext

<PageTitle>Make it Live!</PageTitle>

<div class="container-sm coin-small">
    <h1>Make it Live!</h1>

    @if (AddressForm == null)
    {

    }
    else
    {
        if (_cointributorsData != null)
        {
            foreach (var allocation in _cointributorsData.Allocations)
            {
                <div class="card mb-1">
                    <div class="row g-0">
                        <div class="col-md-2 border-end">
                            <img src="@allocation.AvatarUrl" class="img-fluid rounded-start" alt="@allocation.Destination">
                        </div>
                        <div class="col-md-10">
                            <div class="card-body card-with-percentage">
                                <h5 class="card-title text-truncate">@allocation.Destination</h5>
                                <p class="card-text card-percentage">
                                    @allocation.Allocation<span>%</span>
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }

        <EditForm Model="AddressForm" FormName="deploy-contract" OnSubmit="@AddAddress" method="post">
            <DeployContract CointributorsData="_cointributorsData"></DeployContract>
        </EditForm>
    }
</div>

@code {

    [Parameter]
    public long Id { get; set; }

    public class AddressData
    {
        public string Address { get; set; }
    }

    [SupplyParameterFromForm]
    public AddressData? AddressForm { get; set; }

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private GitHubClient gitHubClient;

    private string cointributorsSha;
    private CointributorsData? _cointributorsData;

    protected override async Task OnInitializedAsync()
    {
        var accessToken = await UserAccessor.GetGitHubAccessToken(HttpContext);

        gitHubClient = new GitHubClient(new ProductHeaderValue("cointributors"))
        {
            Credentials = new Credentials(accessToken)
        };

        var repository = await gitHubClient.Repository.Get(Id);

        var contents = await gitHubClient.Repository.Content.GetAllContents(Id);

        cointributorsSha = contents.Single(c => c.Name == "cointributors.json").Sha;

        var cointributorsBytes = await gitHubClient.Repository.Content.GetRawContent(repository.Owner.Login, repository.Name, "cointributors.json");

        _cointributorsData = JsonSerializer.Deserialize<CointributorsData>(cointributorsBytes);

        AddressForm ??= new AddressData();
    }

    private async Task AddAddress()
    {
        _cointributorsData.Address = AddressForm.Address;

        await gitHubClient.Repository.Content.UpdateFile(Id, "cointributors.json",
            new UpdateFileRequest("Updating Cointributors", JsonSerializer.Serialize(_cointributorsData), cointributorsSha));

        RedirectManager.RedirectTo($"repositories/{Id}/deployed");
    }
}