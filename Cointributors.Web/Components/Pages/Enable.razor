@page "/add-address-gist"

@attribute [Authorize]

@using Cointributors.Data
@using Microsoft.AspNetCore.Authorization
@using Cointributors.Web.Client.Pages
@using Cointributors.Web.Components.Account
@using Octokit

@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject DataContext DataContext

<PageTitle>Add your Cointributors Address</PageTitle>

<div class="container-sm coin-small">

    <h1>Add your Cointributors Address</h1>

    @if (hasWorldIdLogin == false)
    {
        <form class="form-horizontal" action="Account/Manage/LinkExternalLogin" method="post">
            <div>
                <AntiforgeryToken />
                <div class="d-grid">
                    <button type="submit" class="btn btn-outline-dark" name="Provider" value="WorldId">
                        <i class="bi bi-github"></i>
                        Sign in with WorldId
                    </button>
                </div>
            </div>
        </form>
    }

    @if (AddressForm == null)
    {

    }
    else
    {
        if (addressAllreadyAdded)
        {
            <p>
                It looks like you have already added a Cointributors Gist address as <span class="fw-bold">@AddressForm.Address</span>,
                you can check it out <a href="@cointributorsGistUrl" target="_blank">here</a>
            </p>
            <p>
                When you are ready you can add Cointributors to one of your <a href="/repositories">repositories</a>
            </p>
        }
        else
        {
            <p>We just need to add a Gist of your address to your GitHub account so donations can flow your way</p>

            <EditForm Model="AddressForm" FormName="add-address-gist" OnSubmit="@AddAddress" method="post">
                <DepositAddress></DepositAddress>
            </EditForm>
        }

    }
</div>

@code {

    public class AddressData
    {
        public string Address { get; set; }
    }

    [SupplyParameterFromForm]
    public AddressData? AddressForm { get; set; }

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private GitHubClient gitHubClient;

    private bool? hasWorldIdLogin;
    private bool addressAllreadyAdded;
    private string cointributorsGistUrl;

    protected override async Task OnInitializedAsync()
    {
        hasWorldIdLogin = await UserAccessor.GetWorldIdLogin(HttpContext);

        if (hasWorldIdLogin == true)
        {
            var accessToken = await UserAccessor.GetGitHubAccessToken(HttpContext);

            gitHubClient = new GitHubClient(new ProductHeaderValue("cointributors"))
            {
                Credentials = new Credentials(accessToken)
            };

            var gists = await gitHubClient.Gist.GetAll();

            var cointributorsGist = gists.SingleOrDefault(g => g.Description == "My Cointributors Address");

            if (cointributorsGist != null)
            {
                addressAllreadyAdded = true;

                cointributorsGist = await gitHubClient.Gist.Get(cointributorsGist.Id);

                cointributorsGistUrl = cointributorsGist.HtmlUrl;

                AddressForm ??= new AddressData
                {
                    Address = cointributorsGist.Files.FirstOrDefault().Value.Content
                };
            }
            else
            {
                addressAllreadyAdded = false;

                AddressForm ??= new AddressData();
            }
        }
    }

    private async Task AddAddress()
    {
        await gitHubClient.Gist.Create(new NewGist
            {
                Description = "My Cointributors Address",
                Public = true,
                Files =
                {
                    { "Address", AddressForm!.Address }
                }
            });

        RedirectManager.RedirectTo("added-address-gist");
    }
}
