@page "/repositories"

@attribute [Authorize]

@using Cointributors.Data
@using Cointributors.Web.Components.Account
@using Microsoft.AspNetCore.Authorization
@using Octokit

@inject IdentityUserAccessor UserAccessor
@inject DataContext DataContext

<PageTitle>Repositories</PageTitle>

<div class="container-sm coin-small">

    <h1>Repositories</h1>

    <p>Select the repository with the best cointributors.</p>


    @if (repositories == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        @foreach (var repository in repositories)
        {
            <div class="card mb-3">
                <div class="row g-0">
                    <div class="col-md-2">
                        <img src="@repository.Owner.AvatarUrl" class="img-fluid rounded-start" alt="...">
                    </div>
                    <div class="col-md-10">
                        <div class="card-body">
                            <h5 class="card-title">@repository.Name</h5>
                            <p class="card-text"><a href="/repositories/@repository.Id">Select</a></p>
                        </div>
                    </div>
                </div>
            </div>
        }
    }

</div>

@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private GitHubClient gitHubClient;

    private IReadOnlyList<Repository> repositories;

    protected override async Task OnInitializedAsync()
    {
        var accessToken = await UserAccessor.GetGitHubAccessToken(HttpContext);

        gitHubClient = new GitHubClient(new ProductHeaderValue("cointributors"))
            {
                Credentials = new Credentials(accessToken)
            };

        repositories = await gitHubClient.Repository.GetAllForCurrent();

    }
}
